// Aggregator
type TokenId = nat;
type Transfer = vec Part;
type Part = record { 
	owner : principal; 
	flows : vec Flow;
	memo : opt blob
};
type Flow = record {
	token : TokenId;
	account : nat;
	amount : int;
};
type TransferId = record { nat; nat };
type TransferInfo = record {
    transfer : Transfer;
    requester : principal;
    status : record { pending : opt vec bool; accepted : opt int };
};

service : {
	request: (Transfer) -> (variant { Ok: TransferId ; Err });
	accept: (TransferId) -> (variant { Ok; Err });
	reject: (TransferId) -> (variant { Ok; Err });

	// queries
	transfer_details: (TransferId) -> (variant { Ok: TransferInfo; Err }) query;
}
