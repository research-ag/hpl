type SubaccountId = nat;
type MintResult =
  variant {
    err: ImmediateTxError;
    ok: nat;
  };
type RefundResult =
  variant {
    err: variant {
      NotInitialized;
      RefundError;
      NothingToRefund;
    };
    ok;
  };
type ImmediateTxError = 
 variant {
   AssetIdTooLarge;
   FlowsNotSorted;
   FtQuantityTooLarge;
   InsufficientFunds;
   MemoTooLarge;
   MismatchInAsset;
   MissingApproval;
   NonZeroAssetSum;
   NotAController;
   NotInitialized;
   OwnersNotUnique;
   SubaccountIdTooLarge;
   TooManyContributions;
   TooManyFlows;
   UnknownFtAsset;
   UnknownPrincipal;
   UnknownSubaccount;
 };
type AssetIdResult =
variant {
    err: variant {NotInitialized;};
    ok: nat;
};
service : (principal) -> {
    assetId: () -> (AssetIdResult) query;
    mint: (principal, SubaccountId) -> (MintResult);
    refundAll: () -> (RefundResult);
}
