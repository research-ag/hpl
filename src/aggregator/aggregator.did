type AggregatorId = nat;
type SubaccountId = nat;
type AssetId = nat;
type QueueNumber = nat;
type Approvals = vec bool;

// An asset can be a fungible or non-fungible token.
// Currently only fungible tokens are defined.
// Non-fungible tokens can be introduced later as a variant.
// A fungible token asset is a pair consisting of the token id (AssetId)
// and the quantity (nat).
type Asset = variant {
  ft: record {
    AssetId;
    nat;
  };
};

// A transaction has contributions from multiple parties, each of which is of the following type.
// A contribution is relative to its owner, i.e. the subaccount id inside it is relative to the owner principal.
// The memo is limited to 256 bytes.
type Contribution = 
 record {
   owner : principal;
   inflow: vec record {
                 SubaccountId;
                 Asset;
               };
   outflow: vec record {
                  SubaccountId;
                  Asset;
                };
   mints: vec Asset;
   burns: vec Asset;
   memo: opt blob;
 };

// A transaction is a map from owner to the owner's contribution.
// A transaction can specify an optional committer. 
// The committer is the only one who can make an update call and receive the success in the response.
// In that way the committer can process the transaction in a continuation and does not need to rely on polling. 
type Tx = 
 record {
   map: vec Contribution;
   committer: opt principal;
 };

// The globally unique transaction id
type GlobalId = record { AggregatorId; nat };

// The batches sent from aggregator to ledger
type Batch = vec Tx;

// The information about a Transaction that is supplied by the user
// We store the principal who first submited the Transaction.
// The submiter and only the submiter is responsible for the fee at the aggregator level.
// The status goes from unapproved to approved or from unapproved to rejected. 
// While a transaction is unapproved we store a vector of who has already approved it.
// When a transaction is approved then we store its position number in the queue. 
type TxRequest = 
 record {
   tx : Tx;
   submitter: principal;
   status: variant {
             unapproved: Approvals;
             approved: QueueNumber;
             rejected;
             pending;
             failed_to_send
           };
   lid: nat;
 };

// Result types

type SubmitError = 
 variant {
   NoSpace;
   FlowsNotBroughtToZero;
   MaxContributionsExceeded;
   MaxFlowsExceeded;
   MaxFtQuantityExceeded;
   MaxMemoSizeExceeded;
   FlowsNotSorted;
   OwnersNotUnique;
   WrongAssetId;
 };

type Submit_Result = 
 variant {
   ok: GlobalId;
   err: SubmitError;
 };

type NotPendingError = 
 variant {
   WrongAggregator;
   NotFound;
   NoPart;
   AlreadyApproved;
   AlreadyRejected;
 };

type ApproveReject_Result = 
 variant {
   ok;
   err: NotPendingError;
 };

type TxError = variant {NotFound;};

type TxDetails = 
 record {
   tx : Tx;
   submitter: principal;
   status: variant {
             failed_to_send;
             unapproved: Approvals;
             approved: QueueNumber;
             rejected;
             pending
           };
   gid: record { nat; nat };
 };

type Details_Result = 
 variant {
   ok: TxDetails;
   err: TxError;
 };

// API

service : (principal, nat) -> {
  // updates

  // submit a new transaction
  // the caller (= the submiter) needs to have capacity or pay the fee
  // returns the transaction id or an error
  // Invalid if the Transaction is structurally invalid
  // NoSpace if the submiter has no capacity
  submit: (Tx) -> (Submit_Result);
 
  // approve/reject a transaction by its transaction id
  // approving twice while still unapproved is ok
  // returns NotFound if the transaction id isn't found
  // returns NoPart if the caller is not part of the transaction 
  // return AlreadyApproved if the status is #approved
  // returns AlreadyRejected if the status is #rejected
  approve: (GlobalId) -> (ApproveReject_Result);
  reject: (GlobalId) -> (ApproveReject_Result);

  // queries

  // get transaction details
  // NotFound means the transaction id is unknown
  // (was never known or has already been deleted) 
  txDetails: (GlobalId) -> (Details_Result) query;
}
