type SubaccountId = nat;
type MintResult =
  variant {
    err: variant {
      AssetIdTooLarge;
      FlowsNotSorted;
      FtQuantityTooLarge;
      InsufficientFunds;
      MemoTooLarge;
      MismatchInAsset;
      MismatchInRemotePrincipal;
      MissingApproval;
      NonZeroAssetSum;
      NotAController;
      OwnersNotUnique;
      SubaccountIdTooLarge;
      VirtualAccountIdTooLarge;
      TooManyContributions;
      TooManyFlows;
      UnknownFtAsset;
      UnknownPrincipal;
      UnknownSubaccount;
      UnknownVirtualAccount;
      CallLedgerError;
    };
    ok: nat;
  };
type RefundResult =
  variant {
    err: variant {
      RefundError;
      NothingToRefund;
    };
    ok;
  };
type InitResult =
 variant {
   err: variant {
          FeeError;
          NoSpace;
        };
   ok: nat;
 };
service : (opt principal) -> {
    // init
    init: () -> (InitResult); 
    // query
    assetId: () -> (opt nat) query;
    ledgerPrincipal: () -> (principal) query;
    // update
    mint: (principal, SubaccountId) -> (MintResult);
    refundAll: () -> (RefundResult);
}
