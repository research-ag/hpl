type AggregatorId = nat;
type SubaccountId = nat;
type AssetId = nat;

// An asset can be a fungible or non-fungible token.
// Currently only fungible tokens are defined.
// Non-fungible tokens can be introduced later as a variant.
// A fungible token asset is a pair consisting of the token id (AssetId)
// and a quantity (nat).
type Asset = variant {
  ft: record {
    AssetId;
    nat;
  };
};

type SubaccountState = record {
  asset: Asset;
};

// A transaction has contributions from multiple parties, each of which is of the following type.
// A contribution is relative to its owner, i.e. the subaccount id inside it is relative to the owner principal.
// The memo is limited to 256 bytes.
type Contribution = 
 record {
   owner : principal;
   inflow: vec record {
                 SubaccountId;
                 Asset;
               };
   outflow: vec record {
                  SubaccountId;
                  Asset;
                };
   mints: vec Asset;
   burns: vec Asset;
   memo: opt blob;
 };

// A transaction is a map from owner to the owner's contribution.
type Tx = 
 record {
   map: vec Contribution
 };

// The globally unique transaction id
type GlobalId = record { AggregatorId; nat };

// The batches sent from aggregator to ledger
type Batch = vec Tx;

// Result types

type SubaccountId_Result = 
 variant {
   ok: SubaccountId;
   err: variant {NoSpaceForPrincipal; NoSpaceForSubaccount; UnknownFtAsset; };
 };
type Principal_Result = 
 variant {
   ok: principal;
   err: variant {NotFound;};
 };
type Nat_Result = 
 variant {
   ok: nat;
   err: variant {UnknownPrincipal;};
 };
type Subaccount_Result =
 variant {
   ok: SubaccountState;
   err: variant {
     UnknownPrincipal;
     UnknownSubaccount;
   };
 };
type Subaccounts_Result =
  variant {
    ok: vec SubaccountState;
    err: variant {UnknownPrincipal;};
  };
type CreateFt_Result =
  variant {
    ok: nat;
    err: variant {NoSpace; FeeError}
  };
type ProcessImmediateTx_Result =
  variant {
    ok: null;
    err: variant {
      AssetIdTooLarge;
      FlowsNotSorted;
      FtQuantityTooLarge;
      InsufficientFunds;
      MemoTooLarge;
      MismatchInAsset;
      MissingApproval;
      NonZeroAssetSum;
      NotAController;
      OwnersNotUnique;
      SubaccountIdTooLarge;
      VirtualAccountIdTooLarge;
      TooManyContributions;
      TooManyFlows;
      UnknownFtAsset;
      UnknownPrincipal;
      UnknownSubaccount;
    }
  };


service : (vec principal) -> {
  // updates

  /* 
  open n new subaccounts for owner = caller
  if the owner isn't known then the owner is newly registered
  return value is the id of the first newly created subaccount
  the remaining ones are consecutively numbered
  */
  openNewAccounts: (nat, AssetId) -> (SubaccountId_Result);

  // process a batch of transaction, caller must be an aggregator
  processBatch: (Batch) -> ();

  // process one Tx immediately. Works only for Tx with single contribution, owned by caller
  processImmediateTx: (Tx) -> (ProcessImmediateTx_Result);

  // queries
  // stats: () -> 
  // return the principal of the n-th aggregator
  // NotFound if it does not exist
  aggregatorPrincipal: (AggregatorId) -> (Principal_Result) query;

  // return the number of subaccounts maintained by the caller
  // 0 if caller is registered but has no subaccounts
  // UnknownPrincipal if caller is not registered 
  nAccounts: () -> (Nat_Result) query;

  // return the asset in the n-th subaccount of the caller
  // UnknownPrincipal if the caller isn't registered
  // UnknownSubaccount if the caller is registered but does not have n accounts
  asset: (SubaccountId) -> (Subaccount_Result) query;

  // admin interface

  addAggregator: (principal) -> (nat);

  // asset interface

  createFungibleToken: () -> (CreateFt_Result);

  // debug interface

  // return all assets (i.e. all subaccounts) of the given owner
  // UnknownPrincipal if the given owner is not registered
  allAssets: (principal) -> (Subaccounts_Result) query;
}
